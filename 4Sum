// Problem Link - https://leetcode.com/problems/4sum/

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;

        for(int first = 0; first + 3 < n; first++){
            for(int second = first + 1; second + 2 < n; second++){
                int third = second + 1, fourth = n - 1;
                while(third < fourth){
                    long long sum = 0ll + nums[first] + nums[second] + nums[third] + nums[fourth];
                    if(sum == target){
                        ans.push_back({nums[first], nums[second], nums[third], nums[fourth]});
                        while(third < fourth && nums[third] == nums[third + 1]) third++;
                        while(third < fourth && nums[fourth] == nums[fourth - 1]) fourth--;
                        third++;
                        fourth--;
                    } else if(sum > target){
                        while(third < fourth && nums[fourth] == nums[fourth - 1]) fourth--;
                        fourth--;
                    } else{
                        while(third < fourth && nums[third] == nums[third + 1]) third++;
                        third++;
                    }
                }
                while(second + 1 < n && nums[second] == nums[second + 1]) second++;
            }
            while(first + 1 < n && nums[first] == nums[first + 1]) first++;
        }

        return ans;

    }
};
